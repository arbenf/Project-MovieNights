package com.movienights.movienights.controller;

import com.movienights.movienights.entity.Movie;
import com.movienights.movienights.repository.MovieRepository;
import org.apache.http.protocol.HTTP;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpEntity;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.client.RestTemplate;


@RestController    // This means that this class is a Controller
@RequestMapping(path="/api") // This means URL's start with /demo (after Application path)
public class MovieController {
    @Autowired // This means to get the bean called movieRepository
    // Which is auto-generated by Spring, we will use it to handle the data
    private MovieRepository movieRepository;

    RestTemplate restTemplate = new RestTemplate();


    @RequestMapping(method= RequestMethod.GET, value="/movies/{title}")
    public HttpEntity<Movie> getMovie(@PathVariable String title){

        Movie movie = movieRepository.findDistinctFirstByTitleIgnoreCase(title);
        if(movie == null){
            movie = restTemplate.getForObject("http://www.omdbapi.com/?apikey=7a3ecfb6&t="+title, Movie.class);
            if(movie.getTitle() != null){
                movieRepository.save(movie);
            } else {
                return new ResponseEntity<>(HttpStatus.NO_CONTENT);
            }
        }

        //System.out.println(movie.toString());
        return new ResponseEntity<>(movie, HttpStatus.OK);
    }

    @GetMapping(path="/add") // Map ONLY GET Requests
    public @ResponseBody String addNewUser (@RequestParam String title
            , @RequestParam Float imdbRating) {
        // @ResponseBody means the returned String is the response, not a view name
        // @RequestParam means it is a parameter from the GET or POST request

        Movie n = new Movie();
        n.setTitle(title);
        n.setImdbRating(imdbRating);
        movieRepository.save(n);
        return "Saved";
    }

    @GetMapping(path="/all")
    public @ResponseBody Iterable<Movie> getAllUsers() {
        // This returns a JSON or XML with the users
        return movieRepository.findAll();
    }
}